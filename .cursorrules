You are an expert in Angular, SASS, and TypeScript, focusing on scalable web development.

Key Principles

- Provide clear, precise Angular and TypeScript examples.
- Apply immutability and pure functions where applicable.
- Favor component composition for modularity.
- Use meaningful variable names (e.g., `isActive`, `hasPermission`).
- Use kebab-case for file names (e.g., `user-profile.component.ts`).
- Prefer named exports for components, services, and utilities.
- Prefer naming methods with a prefix of `on` (e.g. `onAddUser`)

TypeScript & Angular

- Define data structures with interfaces for type safety.
- Avoid `any` type, utilize the type system fully.
- Organize files: imports, definition, implementation.
- Use template strings for multi-line literals.
- Utilize optional chaining and nullish coalescing.
- Use standalone components when applicable.
- Leverage Angular's signals system for efficient state management and reactive programming.
- Use the `inject` function for injecting services directly within component, directive or service logic, enhancing clarity and reducing boilerplate.

File Naming Conventions

- `*.component.ts` for Components
- `*.service.ts` for Services
- `*.module.ts` for Modules
- `*.directive.ts` for Directives
- `*.pipe.ts` for Pipes
- `*.spec.ts` for Tests
- All files use kebab-case.

Templates

- Use semantic HTML elements where possible

Code Style

- Use single quotes for string literals.
- Indent with 2 spaces.
- Ensure clean code with no trailing whitespace.
- Use `const` for immutable variables.
- Use template strings for string interpolation.

Angular-Specific Guidelines

- Use signals for asynchronous data in templates.
- Implement lazy loading for feature modules.
- Ensure accessibility with semantic HTML and ARIA labels.
- Utilize deferrable views for optimizing component rendering, deferring non-critical views until necessary.
- Incorporate Angular's signals system to enhance reactive programming and state management efficiency.
- Use the `NgOptimizedImage` directive for efficient image loading, improving performance and preventing broken links.
- Use `output` signal instead of `@Output()`
- Use `input` and `input.required` instead of `@Input()`
- Use model input `model` in the component when the value passed to the component also needs to be propagated. .(e.g. a search component takes the `search` text and also propagate to the parent component the changes on it

Import Order

1. Angular core and common modules
2. RxJS modules
3. Other Angular modules
4. Application core imports
5. Shared module imports
6. Environment-specific imports
7. Relative path imports

Error Handling and Validation

- Use proper error handling in services and components.
- Use custom error types or factories.
- Implement Angular form validation or custom validators.

Testing

- Follow the Arrange-Act-Assert pattern for tests.
- Create a `describe` for each public method
- Test happy path and error path

Performance Optimization

- Optimize ngFor with trackBy functions.
- Use pure pipes for expensive computations.
- Avoid direct DOM manipulation; use Angular’s templating system.
- Optimize rendering performance by deferring non-essential views.
- Use Angular’s signals system to manage state efficiently and reduce unnecessary re-renders.
- Use the `NgOptimizedImage` directive to enhance image loading and performance.

Security

- Prevent XSS with Angular’s sanitization; avoid using innerHTML.
- Sanitize dynamic content with built-in tools.

Key Conventions

- Use Angular’s DI system and the `inject` function for service injection.
- Focus on reusability and modularity.
- Follow Angular’s style guide.
- Optimize with Angular's best practices.
- Focus on optimizing Web Vitals like LCP, INP, and CLS.

Commit Message Guidelines

- Avoid overly verbose descriptions or unnecessary details.
- Start with a short sentence in imperative form, no more than 50 characters long.
- Then leave an empty line and continue with a more detailed explanation.
- Write only one sentence for the first part, and two or three sentences at most for the detailed explanation.
- Keep message as short as possible
- Use Conventional Commit format
- Use bullet points for multiple changes

Reference

- Refer to Angular’s official documentation for best practices in Components, Services, and Modules.
- Refer to MDN Web Docs for HTML and CSS best practices and to the W3C guidelines for accessibility standards.

Key Principles for CSS and HTML

- Write semantic HTML to improve accessibility and SEO.
- Ensure responsive design using media queries and flexible layouts.
- Prioritize accessibility by using ARIA roles and attributes.

HTML

- Use semantic elements (e.g., <header>, <main>, <footer>, <article>, <section>).
- Use <button> for clickable elements, not <div> or <span>.
- Use <a> for links, ensuring href attribute is present.
- Use <img> with alt attribute for images.
- Use <form> for forms, with appropriate input types and labels.
- Avoid using deprecated elements (e.g., <font>, <center>).

CSS

- Use external stylesheets for CSS.
- Use class selectors over ID selectors for styling.

  - Use Flexbox and Grid for layout.
  - Use rem and em units for scalable and accessible typography.
  - Use CSS variables for consistent theming.
  - Use CSS for styling, avoiding inline styles.

  - Use Component based BEM (Block Element Modifier) methodology for naming classes.
  - Avoid !important; use specificity to manage styles.

  Responsive Design

  - Use media queries to create responsive layouts.
  - Use mobile-first approach for media queries.
  - Ensure touch targets are large enough for touch devices.
  - Use responsive images with srcset and sizes attributes.
  - Use viewport meta tag for responsive scaling.

  Accessibility

  - Use ARIA roles and attributes to enhance accessibility.
  - Ensure sufficient color contrast for text.
  - Provide keyboard navigation for interactive elements.
  - Use focus styles to indicate focus state.
  - Use landmarks (e.g., <nav>, <main>, <aside>) for screen readers.

  Performance

  - Minimize CSS and HTML file sizes.
  - Use CSS minification and compression.
  - Avoid excessive use of animations and transitions.
  - Use lazy loading for images and other media.

  Testing

  - Test HTML and CSS in multiple browsers and devices.
  - Use tools like Lighthouse for performance and accessibility audits.
  - Validate HTML and CSS using W3C validators.

  Documentation

  - Comment complex CSS rules and HTML structures.
  - Use consistent naming conventions for classes and IDs.
  - Document responsive breakpoints and design decisions.

# Angular 19 Development Rules

## Component Development

### Imports and Setup

```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'app-example',
  standalone: true,
  imports: [CommonModule],
  // ...
})
export class ExampleComponent {
  // Component logic
}
```

### Input/Output Declarations

Always use the new input syntax:

```typescript
// ✅ DO
readonly input = input<string>();
readonly inputRequired = input.required<string>();
readonly model = model<string>();
readonly output = output<string>();

// ❌ DON'T
@Input() value: string;
@Output() valueChange = new EventEmitter<string>();
```

### Dependency Injection

Always use the `inject()` function instead of constructor injection:

```typescript
// ✅ DO
export class ExampleComponent {
  private service = inject(ExampleService);
}

// ❌ DON'T
export class ExampleComponent {
  constructor(private service: ExampleService) {}
}
```

### Providers

Always use the `providers` field in the component decorator for dependency injection:

```typescript
@Component({
  // ...
  providers: [
    ExampleService,
    {
      provide: EXAMPLE_TOKEN,
      useValue: configValue
    }
  ]
})
```

### Signals

Use signals for reactive state management:

```typescript
// State declaration
readonly count = signal(0);
readonly doubled = computed(() => this.count() * 2);

// State updates
onIncrement() {
  this.count.update(count => count + 1);
}
```

### Component Structure

Follow this order in component files:

1. Imports
2. Component decorator
3. Injected dependencies
4. Input/Output declarations
5. Signals and state
6. Lifecycle hooks
7. Public methods
8. Protected methods
9. Private methods

### Template Syntax

Use modern template syntax:

```html
<!-- Use @if instead of *ngIf -->
@if (condition()) {
<div>Content</div>
} @else {
<div>Alternative</div>
}

<!-- Use @for instead of *ngFor -->
@for (item of items(); track item.id) {
<div>{{ item.name }}</div>
}
```

## Best Practices

1. Always make components standalone
2. Use signals for state management
3. Prefer functional updates for signal mutations
4. Use computed signals for derived state
5. Implement OnDestroy for cleanup when necessary
6. Use effect() for side effects
7. Use defer blocks for lazy loading
8. Use input() and output() instead of decorators
9. Use inject() instead of constructor injection
10. Use providers in component decorator
